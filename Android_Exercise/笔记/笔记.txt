101.ADB识别不出：
	(1)在SDK路径C:\Users\Administrator\AppData\Local\Android\sdk 下CMD执行adb shell（该路径可以从SDK 的设置图标查看)
	(2)查看端口占用：netstat -ano | finder "5037"
	(3)在Genymotion设置ADB路径指向SDK文件夹

102.在TextView中有这么一系列属性，可以在文字的上下左右开始结束处画图片等drawable对象。
  android:drawableBottom：	在text的下方输出一个drawable，可以是图片，样式，颜色等。
  android:drawableLeft：	在text的左边输出一个drawable，可以是图片，样式，颜色等。
  android:drawableRight：	在text的右边输出一个drawable，可以是图片，样式，颜色等。
  android:drawableTop：		在text的正上方输出一个drawable，可以是图片，样式，颜色等。
  android:drawableStart: 	在text的开始处输出一个drawable，可以是图片，样式，颜色等。
  android:drawableEnd: 		在text的结束处输出一个drawable，可以是图片，样式，颜色等。
  android:drawablePadding：	设置text与drawable的间距，是与drawableLeft、 drawableRight、drawableTop、drawableBottom一起使用。

103.有关ButterKnife的介绍：(@BindView)
	详见107.
	http://www.jianshu.com/p/1d80c7dd01ba
	

104.关于Android的动画animation:(这是静态写法,动态写法参照82.)
	参考:http://blog.csdn.net/harvic880925/article/details/39996643
	有四种类型:(存放在res/anim 目录下)
		<alpha></alpha> 变换透明度
		<scale></scale> 渐变尺寸伸缩
		<translate></translate> 平移效果
		<rotate></rotate> 旋转效果
		
	主要的属性
		共同:
			android:duration= 动画的持续时间(ms)
			android:fillAfter= 是(true)否(false)保持动画结束时的状态
			android:fillBefore= 动画结束后 是(true)否(false)还原回动画执行前的状态
			android:fillEnable= 动画结束后 是(true)否(false)还原到初始化状态
			android:repeatCount= 动画效果重复次数
			android:repeatMode= 重复类型 reverse--倒放  restart--重新播放
			android:interpolator= 设置插值器，用于定义弹跳效果等
---------------------------------------------------------------------------
		alpha:
			android:fromAlpha= 开始透明度 0—1 (0表示完全透明)
			android:toAlpha= 结束透明度
---------------------------------------------------------------------------
		scale:	
			android:fromXScale= 开始X方向上缩放比例，0.5缩小一倍,1.0无变化,2.0扩大一倍
			android:toXScale= 结束时X方向上缩放比例
			android:pivotX= 缩放起点的X坐标，从缩放控件的左上角为(0,0)算起,可填百分比
			...Y同理
---------------------------------------------------------------------------
		translate:
			android:fromXDelta= 起始点X坐标
			android:toXDelta= 结束点X坐标
			...Y同理
---------------------------------------------------------------------------
		rotate:
			android:fromDegrees= 起始角度
			android:toDegrees= 结束角度
		 	android:pivotX= 旋转坐标

105.AsycTask的基本用法:(参照：http://blog.csdn.net/guolin_blog/article/details/11711405) 73.写过
	1.AsycTask主要用于从子线程切换到UI线程，对UI进行操作;
	2.AsycTask是抽象类，因此要新建类来继承使用，
		例如: public class DownLoad extend AsycTask<Params,Progress,Result> {}
			有3个泛型参数，意义分别为：
				Params:要传递给子线程中使用的参数，没有定义为Void;
				Progress:显示子线程执行的进度，不用显示定义为Void;
				Result:子线程执行结束后返回给主线程UI的值;
	3.AsycTask的详细使用:
		主要需要重写四个方法：
				(1) onPreExecute()
					后台任务执行之前调用，主要用来初始化显示内容
				(2)doInBackground(Params..)
					具体在子线程中执行的过程，可以传入定义时需要在子线程中使用的参数Params，执行完毕后若Result 不为Void，则可以通过return Result 把结果返回。
					当要显示子线程执行进度时，可以在这个方法中调用publishProgress(Progress..) 将当前的进度传递出去
					这个方法的内容都是子线程操作，所以不能对UI进行操作
				(3)onProgressUpdate(Progress...)
					publicshProgress()方法传来的值在此处接收处理，利用该值更新进度监听的UI。
				(4) onPostExecute(Result)
					接收doInBackground()方法返回的值，对UI进行操作。					

106.获取程序的版本信息:
	 通过定义PackageInfo getPackageInfo()方法获取，主要要写的内容有：
		1.获取实例，通过getPackageManager()获取;
		2.获取版本信息，通过getPackageInfo()获取;
		3.在显示版本信息的TextView对待setText方法中调用 this.getPackage().getversionName();
			示例：
				/**
				@ Description: 测试能否获取程序的版本信息
				**/
				public class MainActivity extends AppCompatActivity {
				    /**
				    @ Description :用于获取版本信息的方法
				    **/
				    public PackageInfo getPackageInfo() {
					PackageInfo info = null;//定义对象，存放版本信息
					try {
					       /**
					       @ Description :getPackManager()获取对象的实例,getPackgeInfo()获取版本信息；完成对象实例化
					       @ getPackageName():表示获取当前类的包名
					       @ 0:表示获取版本的信息
					       **/
					    info = getPackageManager().getPackageInfo(getPackageName(),0);
					}catch (PackageManager.NameNotFoundException e) {
					    e.printStackTrace();
					}
					if(info == null) {
					    info = new PackageInfo();
					}
					return info;
				    }	
			-------------------------------------------------------------------
				调用：
				        tv.setText(this.getPackageInfo().versionName);	

	****附录，判断当前版本是否兼容系统****
		public static boolean isMethodsCompat(int VersionCode) {
			int currentVersion = android.os.Build.VERSION.SDK_INT;//获取系统版本
			return currentVersion >= VersionCode;//系统版本大于程序版本说明兼容
		}

107.ButterKnife 注解替代findViewById的使用方法:
	1.添加依赖:
		(1)在Project对应的.gradle中:
			dependencies {
				classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
			}
		(2)在App对应的.gradle中:
			apply plugin: 'com.neenbedankt.android-apt'
				dependencies {
					compile 'com.jakewharton:butterknife:8.0.1'
				  	apt 'com.jakewharton:butterknife-compiler:8.0.1'
				}
	2.在所要引用的Activity中声明注解:
			@BindView( 对应View的Id号 ) View的类型 对象名(自定义)
			示例：@BindView(R.id.text)  TextView   tv
	3.在要使用的view的方法进行绑定(一般直接在onCreate()方法中直接进行绑定):
			ButterKnife.bind(this);
----------------------------------------------使用ButterKnife Zelezny插件一键声明注解-------------------------
		安装好插件后，向上面说的先添加依赖
		鼠标点的onCreate()方法中引入的布局id (即setContentView(R.id.activity_main)上)右键Generate...——Generate ButterKnife Injection..


108.设置布局的渐变背景: 2016-8-24 只写了部分，详细：
						http://keeganlee.me/post/android/20150830
	(1)在drawable中创建一个新的shape，主要包含以下内容：
		<?xml version="1.0" encoding="utf-8"?>  
			<shape  
			    xmlns:android="http://schemas.android.com/apk/res/android"  
			    android:shape=["rectangle" | "oval" | "line" | "ring"] >  //形状: 矩形 | 椭圆 | 线 | 圆 
			    <corners  
				android:radius="integer"  
				android:topLeftRadius="integer"  
				android:topRightRadius="integer"  
				android:bottomLeftRadius="integer"  
				android:bottomRightRadius="integer" /> //圆角度数，只对矩形有效
			    <gradient  //设置渐变色
				android:angle="integer"  //渐变角度，45倍数,45从下往上，0从左往右
				android:centerX="integer"  //渐变中心点坐标
				android:centerY="integer"  //中心点坐标用于放射渐变
				android:centerColor="integer"  //中间颜色
				android:endColor="color"  //结束颜色
				android:gradientRadius="integer"  
				android:startColor="color" //开始颜色  
				android:type=["linear" | "radial" | "sweep"]  //渐变类型：线性 、 放射 、扫描
				android:useLevel=["true" | "false"] />  
			    <padding  
				android:left="integer"  
				android:top="integer"  
				android:right="integer"  
				android:bottom="integer" />  
			    <size  
				android:width="integer"  
				android:height="integer" />  
			    <solid  
				android:color="color" />  
			    <stroke  
				android:width="integer"  
				android:color="color"  
				android:dashWidth="integer"  
				android:dashGap="integer" />  
			</shape>  
		
109.在XML中设置Button背景为透明：
	透明:android:background = "#00000000" //8个0,或者00FFFFFF
	半透明 : android:background = "#e0000000" //一个e7个0

<<<<<<< HEAD
110.Android Studio 打包jar包的方法：
	1.在要打包的app目录的 build.gradle 文件末尾添加：
		task makeJar(type: Copy) {
    			delete 'build/libs/mysdk.jar'
	    		from('build/intermediates/bundles/release/')
	    		into('build/libs/')
	    		include('classes.jar')
	   		rename ('classes.jar', 'mysdk.jar')
		}

		makeJar.dependsOn(build)	
		//在终端执行生成JAR包
		// gradlew makeJar
=======
110.EditText中:
	设置 android:imeOptions = "actionSearch"  可以将手机键盘Enter键变为搜索键
		监听该键盘上的按钮被点击：
			search_edit.setOnEditorActionListener(new TextView.OnEditorActionListener() {
			@Override
			public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
				if(actionId == EditorInfo.IME_ACTION_SEARCH) { //侦听键盘上的搜索搜索按键 点击状态
					Log.d("GAGAGAGA","Searching!");	//响应的事件
				}
				return false;
			}
		});

111.点击Button隐藏手机键盘：
	在Button点击事件中写:
		//隐藏键盘
		InputMethodManager imm = (InputMethodManager) MyApplication.getInstance().getSystemService(Context.INPUT_METHOD_SERVICE);
		imm.hideSoftInputFromWindow(search_edit.getWindowToken(),0);

112.通过
	android:minWidth= 
	android:minHight=
		可以设置Button边框属性

113.GridView的屏幕适配：
	    WindowManager wm = (WindowManager) mContext.getSystemService(Context.WINDOW_SERVICE);  //获取WindowManager
            int wigth = wm.getDefaultDisplay().getWidth();
            AbsListView.LayoutParams layoutParams = new AbsListView.LayoutParams(wigth/3,wigth/3);
            convertview.setLayoutParams(layoutParams);


114.Session 'app': Error Launching activity 解决办法：
	禁用Instant Run
	Setting——Build, Execution, Deployment > Instant Run

115.Picasso使用方法：
	1.在APP相应的build添加:
		compile 'com.squareup.picasso:picasso:2.5.2'
	2.在要加载图片的Adapter添加:
		Picasso.with(mContext).load(dataBean.getCover_url()).into(viewHolder.itemImg);

116.封装好的NoHttp的基本使用方法：（原始方法见 98. ）
	将ShaoU/Nohttp的内容添加到项目中，最好在一个新建的包下
	然后再所要使用的Activity的.java中：
		1.添加用作区分的 WHAT 值
		2.在发起请求的位置 onCreate或者onClick方法 中创建 request对象、 调用CallServer接口
			例如：
				 public void onClick(View v) {
					Request<String> request = NoHttp.createStringRequest("https://www.baidu.com/", RequestMethod.GET);//创建请求
				//        request.add("wa","wa");//添加参数
					CallServer.getInstance().add(this,request,callBack,WHAT,true,false,false);
				}
		3.实现CallServer接口：（一般紧接在上面那串的后面）
			例如：
				 private HttpCallBack<String> callBack = new HttpCallBack<String>() {
					@Override
					public void onSucceed(int what, Response<String> response) {
					    tv.setText(response.get());
					}

					@Override
					public void onFailed(int what, Response<String> response) {

					}
				    };
			

117.Ultra Pull To Refresh 第三方上拉刷新的使用方法:
	--------------------------------------------------------------------------------------------------
	只记下基础使用，其他使用途径参照:
		http://blog.csdn.net/qq_20437453/article/details/48294507
		https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh/blob/master/README-cn.md
	--------------------------------------------------------------------------------------------------
	1.添加依赖,在APP的build.gradle中:
		dependdencies {
			compile 'in.srain.cube:ultra-ptr:1.0.11'
		}
	2.在xml文件中对所要刷新的控件包裹一层下拉刷新控件
		<in.srain.cube.views.ptr.PtrClassicFrameLayout>...</in.srain.cube.views.ptr.PtrClassicFrameLayout>
		例如：
			<in.srain.cube.views.ptr.PtrClassicFrameLayout
			    android:id="@+id/ptr"
			    xmlns:cube_ptr="http://schemas.android.com/apk/res-auto"
			    android:layout_width="match_parent"
			    android:layout_height="match_parent"
			    cube_ptr:ptr_duration_to_close="200"
			    cube_ptr:ptr_duration_to_close_header="1000"
			    cube_ptr:ptr_keep_header_when_refresh="true"
			    cube_ptr:ptr_pull_to_fresh="false"
			    cube_ptr:ptr_ratio_of_header_height_to_refresh="1.2"
			    cube_ptr:ptr_resistance="1.7"
			>
			<TextView
			    android:layout_width="match_parent"
			    android:layout_height="match_parent"
			    android:text="Hello World!!!!!!!!!"
			    android:textColor="#FF0000"
			    android:gravity="center"
			    android:textSize="40sp"
			    android:id="@+id/text"
			    />
			</in.srain.cube.views.ptr.PtrClassicFrameLayout>
	3.在相应的onCreate()方法中添加顶部：
			(一).通过findviewbyid 获得刷新控件的对象;
			(二).刷新控件对象添加顶部，并设置刷新时间，刷新事件
				例如：
					ptr = (PtrClassicFrameLayout) findViewById(R.id.ptr);//获取顶部刷新控件
					textView = (TextView) findViewById(R.id.text);
					ptr.setPtrHandler(new PtrDefaultHandler() {
					@Override
					public void onRefreshBegin(PtrFrameLayout frame) {
						ptr.postDelayed(new Runnable() {
						@Override
						    public void run() {
							ptr.refreshComplete();
							textView.setText("刷新终了"); //具体刷新事件
						    }
						},3000);
					    }
					});


118.ShareSDK(http://sharesdk.cn)使用方法:
	1.导入依赖:
		(1)在官网下载相应的android-SDK后,解压打开里面的QuickIntegrater.jar，填好项目名,包名获得相应的文件夹:
			------项目名
				-------assets
				-------libs
				-------res
				-------src
		(2)将得到的四个文件夹复制到要使用项目的对应位置:
			假定,项目名为Project,要使用ShareSDK的Module名为app
			assets:放到 Project --> app --> src --> main
			libs:放到 Project --> app --> libs,要记得build引入的jar(右键 Add As Library)
			res:放到 Project --> app --> src --> main --> res
			src:直接把里面的cn‘、com放到 Project --> app --> src --> main --> java
	2.在AndroidMainfest.xml 添加权限、注册Activity:
		(1)添加权限:
			<uses-permission android:name="android.permission.GET_TASKS" />
			<uses-permission android:name="android.permission.INTERNET" />
			<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
			<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
			<uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
			<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
			<uses-permission android:name="android.permission.READ_PHONE_STATE" />
			<uses-permission android:name="android.permission.MANAGE_ACCOUNTS"/>
			<uses-permission android:name="android.permission.GET_ACCOUNTS"/>
			<!-- 蓝牙分享所需的权限 -->
			<!--<uses-permission android:name="android.permission.BLUETOOTH" />-->
			<!--<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />-->			 
		(2)注册Activity:(注意位置)
			<activity
				android:name="com.mob.tools.MobUIShell"
				android:theme="@android:style/Theme.Translucent.NoTitleBar"
				android:configChanges="keyboardHidden|orientation|screenSize"
				android:screenOrientation="portrait"
				android:windowSoftInputMode="stateHidden|adjustResize" >

				<intent-filter>
					<data android:scheme="tencent100371282" />
					<action android:name="android.intent.action.VIEW" />
					<category android:name="android.intent.category.BROWSABLE" />
					<category android:name="android.intent.category.DEFAULT" />
				</intent-filter>

				<!-- 调用新浪原生SDK，需要注册的回调activity -->
				<intent-filter>
					<action android:name="com.sina.weibo.sdk.action.ACTION_SDK_REQ_ACTIVITY" />
					<category android:name="android.intent.category.DEFAULT" />
				</intent-filter>
			</activity>
			<!--微信分享回调 -->
			<activity
				android:name=".wxapi.WXEntryActivity"
				android:theme="@android:style/Theme.Translucent.NoTitleBar"
				android:configChanges="keyboardHidden|orientation|screenSize"
				android:exported="true"
				android:screenOrientation="portrait" 
			/>		
	3.功能的使用:
		(1)在要使用分享功能的.java中添加函数：
			private void showShare() {
				ShareSDK.initSDK(this);
				OnekeyShare oks = new OnekeyShare();
				//关闭sso授权
				oks.disableSSOWhenAuthorize();

				// 分享时Notification的图标和文字  2.5.9以后的版本不调用此方法
				//oks.setNotification(R.drawable.ic_launcher, getString(R.string.app_name));
				// title标题，印象笔记、邮箱、信息、微信、人人网和QQ空间使用
				//        oks.setTitle(getString(R.string.share));
				// titleUrl是标题的网络链接，仅在人人网和QQ空间使用
				oks.setTitleUrl("http://sharesdk.cn");
				// text是分享文本，所有平台都需要这个字段
				oks.setText("我是分享文本");
				//分享网络图片，新浪微博分享网络图片需要通过审核后申请高级写入接口，否则请注释掉测试新浪微博
				oks.setImageUrl("http://f1.sharesdk.cn/imgs/2014/02/26/owWpLZo_638x960.jpg");
				// imagePath是图片的本地路径，Linked-In以外的平台都支持此参数
				//oks.setImagePath("/sdcard/test.jpg");//确保SDcard下面存在此张图片
				// url仅在微信（包括好友和朋友圈）中使用
				oks.setUrl("http://sharesdk.cn");
				// comment是我对这条分享的评论，仅在人人网和QQ空间使用
				oks.setComment("我是测试评论文本");
				// site是分享此内容的网站名称，仅在QQ空间使用
				oks.setSite(getString(R.string.app_name));
				// siteUrl是分享此内容的网站地址，仅在QQ空间使用
				oks.setSiteUrl("http://sharesdk.cn");

				// 启动分享GUI
				oks.show(this);
			}
		(2)在相应的onCreate()中初始化SDK:
			ShareSDK.initSDK(this);
		(3)在所要使用的事件中(如onClick() )调用刚刚添加到函数即可
			例如:
			 public void onClick(View v) {
        			showShare();
    			}
					
>>>>>>> e77b77084abad1b7da5280cfb9d1c5d7142e1005
